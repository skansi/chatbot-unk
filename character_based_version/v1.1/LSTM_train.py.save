# improved LSTM_train.py -> bigger dataset, formatted data (specified vocabulary), bigger NN, more parameters...

import numpy
from keras.models import Sequential
from keras.layers import Dense, Flatten
from keras.layers import Dropout
from keras.layers.recurrent import LSTM, GRU, SimpleRNN
from keras.optimizers import Adam
from keras.callbacks import ModelCheckpoint
from keras.utils import np_utils
from keras.models import load_model
import os
import pickle
import sys

MODEL = '/home/novak_luka93/chatbot-unk/character_based_version/v1.1/LSTM_model.h5'
MODEL_WEIGHTS = '/home/novak_luka93/chatbot-unk/character_based_version/v1.1/LSTM_model_weights.h5'
ROOTDIR = '/home/novak_luka93/wikidump'
VOCABULARY = '/home/novak_luka93/chatbot-unk/character_based_version/v1.1/vocab2'
CHAR_DICT = '/home/novak_luka93/chatbot-unk/character_based_version/v1.1/char_dict.pkl'

# # create vocabulary with all ascii characters
# L = list(range(128))
# VOCAB = list(''.join(map(chr, L)))

# list of all allowed characters
with open(VOCABULARY, 'r', encoding='utf-8') as v:
    VOCAB = eval(v.read())

VOCAB = sorted(VOCAB)
print(VOCAB)

# hyperparameters
NUM_EPOCH = 10
BATCH_SIZE = 32
NUM_HIDDEN = 128
VERBOSE = 1
DATA_SIZE = 512100
CONTEXT = 100
VOCAB_SIZE = len(VOCAB)
INPUT_SHAPE = (CONTEXT, VOCAB_SIZE)
print('Input shape:', INPUT_SHAPE)

# create mapping of unique chars to integers
char_to_int = dict((c, i) for i, c in enumerate(VOCAB))
print(char_to_int)

# saving dictionary for model prediction
with open(CHAR_DICT, 'wb') as f:
    pickle.dump(char_to_int, f, pickle.HIGHEST_PROTOCOL)

# define the LSTM model
model = Sequential()
model.add(LSTM(NUM_HIDDEN, input_shape=INPUT_SHAPE, batch_size=BATCH_SIZE, return_sequences=True))
model.add(Dropout(0.3))
model.add(LSTM(NUM_HIDDEN, return_sequences=True))
model.add(Dropout(0.25))
model.add(LSTM(NUM_HIDDEN, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(NUM_HIDDEN))
# model.add(Flatten())
model.add(Dense(units=VOCAB_SIZE, activation='softmax'))
model.summary()

adam_optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08)

model.compile(loss='categorical_crossentropy', optimizer=adam_optimizer, verbose=VERBOSE, metrics=['accuracy'])

model.save(MODEL)

for subdir, dirs, files in os.walk(ROOTDIR):
    name = str(subdir).split('/')[-1]
    print(subdir)
    list_files = files
    completed = []
    for f in files:
        print('Working on file:', f)
        SOURCE = str(subdir) + '/' + str(f)

	# load text and covert to lowercase
        text = open(SOURCE, encoding='utf-8').read()
        text = text.lower()

        repeat = 1

        if len(text) >= 2*DATA_SIZE:
            repeat = 2
            print('Data split in 2 becauseof its size!')
        elif len(text) > DATA_SIZE:
            print('Data shrinked to certain size to fit the net!')
        else:
            print('Data too small! Skipping...')
            continue

        for i in range(repeat):

            # text_list = raw_text.split(' ')
            # i = 0
            # while i < len(text_list):
            #     if text_list[i] == '':
            #         text_list.pop(i)
            #         continue
            #     else:
            #         text_list[i] = text_list[i].strip()
            #         i += 1
            #
            # raw_text = ' '.join(text_list)

            if i == 0:
                raw_text = text[:DATA_SIZE]
            else:
                raw_text = text[DATA_SIZE:2*DATA_SIZE]

    		# summarize the loaded data
            n_chars = len(raw_text)
            # n_vocab = len(chars)
            print("Total Characters in Article: ", n_chars)
            # print("Total Vocab: ", n_vocab)

    		# prepare the dataset of input to output pairs encoded as integers
            dataX = []
            dataY = []
            for i in range(0, n_chars - CONTEXT):
            	seq_in = raw_text[i:i + CONTEXT]
                # print('Seq_in_' + str(i) + ': ' + seq_in)
            	seq_out = raw_text[i + CONTEXT]
                # print('Seq_out_' + str(i) + ': ' + seq_out)
            	dataX.append([char_to_int[char] for char in seq_in])
            	dataY.append(char_to_int[seq_out])
            N_SAMPLES = len(dataX)
            print("Total Number Of Samples: ", N_SAMPLES)

            # normalize and one hot encode every letter from the context
            list_samples = []
            for x in dataX:
            	x = [(i / VOCAB_SIZE) for i in x]
            	list_samples.append(np_utils.to_categorical(x, num_classes=VOCAB_SIZE))

            # reshape X to be [samples, time steps, features]
            X = numpy.reshape(list_samples,(N_SAMPLES, CONTEXT, VOCAB_SIZE))
            print('X:', X.shape)

            # normalize
            # X = X / float(n_vocab)

            # one hot encode the output variable
            y = np_utils.to_categorical(dataY)
            y = numpy.reshape(y, (N_SAMPLES, VOCAB_SIZE))
            print('y:', y.shape)

            model = load_model(MODEL)

            # fit the model
            model.fit(X, y, epochs=NUM_EPOCH, batch_size=BATCH_SIZE, verbose=VERBOSE)

            print('\nSaving model...\n')
            model.save(MODEL)
            model.save_weights(MODEL_WEIGHTS)
            print('Saved!\n')

print('Done.')
