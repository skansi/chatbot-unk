Programski jezik Java nastao je iz programskog jezika Oak. Pocev od 1995 godine kada je u u internet preglednik Netscape Navigator ugradena podrska za Javu pa sve do danas, jezik se razvija i siri te je danas prakticki sveprisutan.
Jedna od temeljnih vodilja u razvoju ovog jezika, koja je dovela do ovakve opce prihvacenosti, jest ideja napisi-jednom-pokreni-bilo-gdje. Centralna tema u razvoju Jave je potpora za viseplatformnost, odnosno ideja da se programeru ponudi apstraktni pogled na racunalo -- pogled koji ne ukljucuje platformski specificne detalje poput sirine podatkovne rijeci centralnog procesora,
direktan pristup upravljackim programima operacijskog sustava ili podrzanom sklopovlju. Umjesto toga, Java definira apstraktni racunski stroj kod kojeg je sve propisano i opisano specifikacijom. Za programera je u konacnici skroz nebitno hoce li se njegov program izvoditi na 16-bitnom, 32-bitnom ili 64-bitnom procesoru. Da bi to bilo moguce, prilikom programiranja u Javi programi se pisu za Javin virtualni stroj. To je stroj koji je definiran specifikacijom i na kojem se izvode svi programi pisani u Javi. Zahvaljujuci ovakvoj virtualizaciji, programer doista ne treba (i ne moze) razmisljati o specificnostima platforme na kojoj ce se izvoditi program koji je napisao, a to upravo i jest ideja izrade aplikacija za vise platformi odjednom. Dakako, na svakoj konkretnoj platformi morat ce postojati implementacija Javinog virtualnog stroja koja ce u konacnici biti svjesna na kojoj se platformi
izvodi te kako se na toj platformi obavljaju pojedini zadatci (poput pristupa datotecnom sustavu, mreznim resursima, visedretvenosti i slicno). Pa sto je sve danas Java? Termin Java danas se koristi u nekoliko razlicitih znacenja. U najuzem znacenju, pojam Java odnosi se na programski jezik. Najnovija verzija programskog jezika Java definirana je specifikacijom. U okviru te specifikacije definira se nacin pisanja literala, kljucne rijec jezika, njihova semantika te nacin pisanja valjanog koda. Pod pojmom "valjanog" ovdje podrazumjevamo sintaksno i semanticki ispravnog koda sa stajalista jezicnog prevodioca koji izvorni Java kod treba obraditi i stvoriti izvrsni kod za Javin virtualni stroj. Nauciti programski jezik Javu (u najuzem mogucem smislu rijeci) moze se vrlo brzo: pravila pisanja koda su vrlo jednostavna, kljucnih rijeci nema puno (par desetaka) i to se sve moze nauciti ekspresno. Medutim, jezik sam po sebi je zapravo poprilicno beskoristan. Da bismo mogli djelotvorno pisati programe, potreban nam je skup biblioteka cijom cemo uporabom moci obavljati zeljene funkcije (pristupiti datoteci, stvoriti prozor u grafickom korisnickom sucelju, raditi s razlicitim vrstama podatkovnih kolekcija i slicno). Osnovni skup biblioteka koje programeru stoje na raspolaganju dio su Java platforme i opisane su u okviru dokumenta Java API. Neovisno o platformi na kojoj se Java program izvodi, programeru se garantira da ce mu na raspolaganju biti sve bibloteke koje su opisane u okviru tog dokumenta. Javin virtualni stroj jos je jedan od nacina na koji se moze interpretirati pojam Java. To je virtualni stroj definiran specifikacijom koji stoga ima definiran skup podrzanih instrukcija (takozvani bajtkod, engl bytecode), nacin dobivanja programa te nacin na koji se kod izvodi. Umjesto kroz programski jezik Java, programeri programe mogu pisati koristeci direktno bajtkod koji je namijenjen upravo Javinom virtualnom stroju, pri cemu se i dalje zadrzava portabilnost tako napisanih programa. To je, u odredenom smislu, jednako kao da pisemo program za neki "virtualni procesor". U okviru ove knjige necemo se baviti time. Programere koji se po prvi puta susrecu s programskim jezikom Java cesto znaju zbuniti dva pojma: JRE te JDK (ili u ranijim verzijama SDK). Evo o cemu se radi. Programeri programe pisu zadavanjem izvornog koda u programskom jeziku Java (tekstovne datoteke s ekstenzijom .java. Izvorni se kod potom prevodi u izvrsni kod odnosno bajtkod (datoteke s ekstenzijom class). Da bi se izvrsni program mogao pokrenuti, potreban je Javin virtualni stroj te skup biblioteka cije se postojanje garantira svim Java programima. Ovaj postupak prikazan je na slici. S obzirom na opisani proces, sada je jasna podjela platforme na dvije komponente.
JRE predstavlja osnovni podskup Java platforme koji korisnicima nudi mogucnost pokretanja prevedenih programa. JRE se sastoji od implementacije Javinog virtualnog stroja te obaveznih biblioteka cije se postojanje garantira programima. Ovo je minimum koji ce svima omoguciti da pokrecu izvrsne Java programe. Uz navedeno, JRE sadrzi i implementaciju dodatka za webpreglednike koji i njima omogucava izvodenje Java programa koje korisnici preuzimaju direktno s Interneta. Pojam JDK predstavlja nadskup opisane platforme. JDK sadrzi sve sto je potrebno kako bi programer mogao prevoditi izvorni kod Java programa u bajtkod te kako bi mogao izvoditi Java programe. To znaci da JDK u sebi ukljucuje JRE te donosi jos i implementaciju prevodioca i drugih pomocnih alata. JDK pri tome ne sadrzi okolinu za razvoj Java programa -- pretpostavka je da programeru treba ponuditi samo jos mogucnost prevodenja koda. Na stranicama proizvodaca Jave (od nedavno, to je tvrtka Oracle) moguce je pronaci i paket koji sadrzi okolinu za razvoj programa pod nazivom NetBeans. Osim navedene, danas je dostupan jos niz drugih okolina, sto besplatnih a sto komercijalnih, od cega cemo svakako preporuciti okolinu otvorenog koda pod nazivom Eclipse. Konacno, ovaj pregled ne bi bio potpun kada ne bismo spomenuli da sve do sada opisano predstavlja samo jedan mali podskup Java platforme koji je poznat pod nazivom Java standard edition, odnosno Java SE. Puno sira specifikacija poznata pod nazivom Java Enterprise Edition i donosi niz tehnologija koje pokrivaju izradu web aplikacija, rad s bazama podataka i raspodijeljeno transakcijsko poslovanje, komuniciranje porukama i jos niz drugih primjena. Postoji i specifikacija koja pokriva izradu Java aplikacija za mobilne uredaje koja medutim iz razlicitih razloga u ovom trenutku nije bas najbolje prihvacena, sto je pak dovelo do razvoja Googleove platforme Android koja je postala daleko rasirenija (za tu platformu programi se takoder pisu u programskom jeziku Javi; razlika je u skupu podrzanih biblioteka koje je u ovom slucaju definirao i odrzava Google).
